import { EventEmitter } from './EventEmitter'

describe('EventEmitter', () => {
  test('register listener', () => {
    const ee = new EventEmitter()
    const cb = jest.fn()
    ee.on('event2', cb)
    ee.emit('event1', 1)
    ee.emit('event2', 2)
    ee.emit('event2', 3)
    expect(cb).toBeCalledTimes(2)
    expect(cb).toBeCalledWith(2)
    expect(cb).toBeCalledWith(3)
  })

  test('register once listener', () => {
    const ee = new EventEmitter()
    const cb = jest.fn()
    ee.on('event2', cb, true)
    ee.emit('event1', 1)
    ee.emit('event2', 2)
    ee.emit('event2', 3)
    expect(cb).toBeCalledTimes(1)
    expect(cb).toBeCalledWith(2)
  })

  test('register many listeners', () => {
    const ee = new EventEmitter()
    const cb1 = jest.fn()
    const cb2 = jest.fn()
    const cb3 = jest.fn()
    const cb4 = jest.fn()
    const cbAll = jest.fn()
    ee.on('event1', cb1)
    ee.on('event2', cb2)
    ee.on('event2', cb3)
    ee.on('event4', cb4)
    ee.all(cbAll)
    ee.emit('event1', 1)
    ee.emit('event2', 2)
    ee.emit('event3', 3)
    expect(cb1).toBeCalledTimes(1)
    expect(cb2).toBeCalledTimes(1)
    expect(cb3).toBeCalledTimes(1)
    expect(cb4).toBeCalledTimes(0)
    expect(cbAll).toBeCalledTimes(3)
    expect(cb1).toBeCalledWith(1)
    expect(cb2).toBeCalledWith(2)
    expect(cb3).toBeCalledWith(2)
    expect(cbAll).toBeCalledWith(1)
    expect(cbAll).toBeCalledWith(2)
    expect(cbAll).toBeCalledWith(3)
  })

  test('unregister listeners', () => {
    const ee = new EventEmitter()
    const cb1 = jest.fn()
    const cb2 = jest.fn()
    const cb3 = jest.fn()
    const cb4 = jest.fn()
    ee.on('event1', cb1)
    ee.on('event2', cb2)
    ee.on('event3', cb3)
    const off = ee.on('event4', cb4)
    ee.off('event2', cb1)
    ee.off('event2', cb2)
    ee.off('event3')
    off()

    ee.emit('event1', 1)
    ee.emit('event2', 2)
    ee.emit('event3', 3)
    ee.emit('event4', 1)

    expect(cb1).toBeCalledTimes(1)
    expect(cb2).toBeCalledTimes(0)
    expect(cb3).toBeCalledTimes(0)
    expect(cb4).toBeCalledTimes(0)
    expect(cb1).toBeCalledWith(1)

    ee.off()
    ee.emit('event1', 1)
    expect(cb1).toBeCalledTimes(1)
  })
})
